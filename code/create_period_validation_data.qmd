---
title: "Create Validation Data"
format: html
editor: visual
---

```{r}
library(here)
library(tidyverse)
```

## Load in raw data

```{r}
path <- here("data") 

# idl datasets:  
fra_idl <- read.table(paste(path, "idl_fra_death_105.txt", sep='/'), sep=';', 
                         header = TRUE)
dnk_idl <- read.table(paste(path, "idl_dnk_death_105.txt", sep='/'), sep=';', 
                          header = TRUE)
nor_idl <- read.table(paste(path, "idl_nor_death_105.txt", sep='/'), sep=';', 
                         header = TRUE)
swe_idl <- read.table(paste(path, "idl_swe_death_105.txt", sep='/'), sep=';', 
                         header = TRUE)

# hmd datasets:
fra_deaths_hmd <- read.table(paste(path, "FRATNPdeath.txt", sep='/'), sep=',', 
                                header = TRUE)
fra_expo_hmd <- read.table(paste(path, "FRAExposures_1x1.txt", sep='/'), sep='', 
                              header = TRUE, stringsAsFactors = FALSE, skip = 2)


dnk_deaths_hmd <- read.table(paste(path, "DNKdeath.txt", sep='/'), sep=',', 
                                header = TRUE)
dnk_expo_hmd <- read.table(paste(path, "DNKExposures_1x1.txt", sep='/'), sep='', 
                              header = TRUE, stringsAsFactors = FALSE, skip = 2)


nor_deaths_hmd <- read.table(paste(path, "NORdeath.txt", sep='/'), sep=',', 
                                header = TRUE)
nor_expo_hmd <- read.table(paste(path, "NORExposures_1x1.txt", sep='/'), sep='', 
                              header = TRUE, stringsAsFactors = FALSE, skip = 2)


swe_deaths_hmd <- read.table(paste(path, "SWEdeath.txt", sep='/'), sep=',', 
                                header = TRUE)
swe_expo_hmd <- read.table(paste(path, "SWEExposures_1x1.txt", sep='/'), sep='', 
                              header = TRUE, stringsAsFactors = FALSE, skip = 2)

```

```{r}
countries <- c("fra", "dnk", "nor", "swe")
```

## HMD Preparation

The first step in preparing the validation data for this project is selecting the highest quality data from the HMD. This means filtering out any data in the HMD input data that is not available by single year of age or time and with only Lexis rectangles available rather than Lexis triangles.

TODO: Make sure including VV cases doesn't break anything...

```{r}
# drop cases without 1x1 counts & with lexis rectangles rather than triangles
cleaned_deaths_list <- list()
for (country in countries) {
  data <- get(paste(country, "deaths_hmd", sep = '_'))
  years_to_remove <- data |>
    filter(
      (AgeInterval != "1" & AgeInterval != "+" & AgeInterval != ".") | 
      YearInterval != 1 | 
      # Age == "UNK" | # this line gets rid of 
                      # many years & doesn't allow for complete 
                      # cohort data so I'm removing it and will 
                      # redistribute unknown deaths
      (Lexis != "TL" & Lexis != "TU" & Lexis != "." & Lexis != "VV") |
      LDB != 1
      ) |>
    pull(unique(Year))

  cleaned_deaths_list[[country]] <- data |>
    filter(!(Year %in% years_to_remove))
}
```

Then we need to distribute any deaths of unknown age across all ages according to the procedure outlined in the HMD methods protocol

```{r}
cleaned_deaths_list_distributed_deaths <- lapply(cleaned_deaths_list, function(data) {
  data <- data %>%
    group_by(Year) %>%
    mutate(
      Deaths_with_unk = case_when(
        Lexis == "TL" & any(Age == "UNK") ~ Deaths + 
          (sum(Deaths[Age == "UNK"]) * 
            (Deaths / (sum(Deaths[Age != "UNK" & Lexis == "TL"], na.rm = TRUE) + 
                       sum(Deaths[Age != "UNK" & Lexis == "TU"], na.rm = TRUE)))),
        Lexis == "TU" & any(Age == "UNK") ~ Deaths + 
          (sum(Deaths[Age == "UNK"]) * 
            (Deaths / (sum(Deaths[Age != "UNK" & Lexis == "TU"], na.rm = TRUE) + 
                       sum(Deaths[Age != "UNK" & Lexis == "TL"], na.rm = TRUE)))),
        !any(Age == "UNK") ~ Deaths,
        TRUE ~ Deaths
      )
    ) %>%
    ungroup()
  return(data)
})
```

```{r}
cleaned_deaths_list <- lapply(cleaned_deaths_list_distributed_deaths, function(data) {
  data |>
    filter(Age != "UNK") |>
    rename(Deaths_without_unk = Deaths, Deaths = Deaths_with_unk)
})
```

Using the raw input data requires manually calculating period and cohort death counts by manipulating the Lexis triangles according to the HMD procedure.

```{r}
# get period death counts by summing the upper and lower triangles for each 
# age, year, and sex 
dfs_with_period <- lapply(cleaned_deaths_list, function(data) {
  data |>
    group_by(Age, Year, Sex) |>
    mutate(Period_Deaths = sum(Deaths)) |>
    ungroup() |>
    filter(Lexis == "TL")  
  })
```

Finally, I set up a function that will allow us to merge lists of dataframes from different countries into a single dataframe. This will make future adjustments of the data easier.

```{r}
# function to merge a list of dataframes into a single df
merge_data_list <- function(data_list) {
  
  # add a column to each dataframe to identify the country
  data_list <- lapply(names(data_list), function(country) {
    df <- data_list[[country]]
    df$country <- country
    return(df)
  })
  
  merged_data <- do.call(rbind, data_list)
}
```

#### Prepare period data

To prepare the period data, I need to first merge the input death count data with the HMD 1x1 exposure data. This requires reformatting the exposure data to a long format, recoding a few variables, and reclassifying variable types. Finally, the datasets are merged with a left join, retaining all cases in the deaths dataset.

```{r}
# period merging function to merge death and exposure data 
combine_expo_death_data_per <- function(death_data, expo_data) {
  expo_long <- pivot_longer(expo_data, cols = c('Female', 'Male', 'Total'),
                              names_to = "Sex", values_to = "Exposure")

  expo_long <- expo_long |>
    mutate(Sex = ifelse(Sex == "Female", "f", 
                      ifelse(Sex == "Male", "m", 
                             ifelse(Sex == "Total", "b", Sex)))) |>
    mutate(Age = ifelse(Age == "110+", "110", Age)) |>
    mutate(Year = as.integer(Year), Age = as.integer(Age), Sex = as.character(Sex)) |>
    filter(!Sex == 'b')
  
  deaths <- death_data |> 
    select(Year, Age, Sex, Period_Deaths) |>
    mutate(Year = as.integer(Year), Age = as.integer(Age), Sex = as.character(Sex))

  combined_df <- deaths |>
    left_join(expo_long, by = c("Year", "Age", "Sex"))
    # full_join(expo_long, by = c("Year", "Age", "Sex")) 
  
  return(combined_df)
}
```

```{r}
# merge death and exposure data for each country 
hmd_list <- list()
for (country in countries) {
  exposure <- get(paste(country, "expo_hmd", sep = '_'))
  deaths <- dfs_with_period[[country]]
  combined_data <- combine_expo_death_data_per(deaths, exposure)
  hmd_list[[country]] <- combined_data
}

# concatenate list 
hmd_period_data <- merge_data_list(hmd_list)
```

## IDL Preparation

#### Prepare period data

The International Database of Longevity (IDL) contains detailed and carefully validated data on deaths over 105 years of age. Each row represents one death, which means that merging with the HMD data requires aggregating deaths by year, age, and sex. The prep_period_idl() function does this, filling in any missing year, age, sex combinations with 0. This function is run on each country and the final list is merged into a single dataframe.

TODO: make sure that IDL data is manipulated properly so that its comparable to HMD (see Linh email)

```{r}
prep_period_idl <- function(idl_data) {
  cleaned_data <- idl_data |>
    group_by(DEATH_YEAR, AGEYEARS, SEX) |>
    summarise(Deaths = n(), .groups = 'keep') |>
    ungroup() |>
    complete(DEATH_YEAR = seq(min(idl_data$DEATH_YEAR), 
                              max(idl_data$DEATH_YEAR), 1),
             AGEYEARS = seq(min(idl_data$AGEYEARS), 
                            max(idl_data$AGEYEARS), 1),
             SEX = unique(idl_data$SEX),
             fill = list(Deaths = 0)) |>
    group_by(DEATH_YEAR, AGEYEARS, SEX)
  return(cleaned_data)
}

idl_period_list <- list()
for (country in countries) {
  print(country)
  data <- get(paste(country, "idl", sep = '_'))
  cleaned_data <- prep_period_idl(data)
  idl_period_list[[country]] <- cleaned_data
}

idl_period_data <- merge_data_list(idl_period_list)
```

#### Check consistency between IDL and HMD

Before moving on to the next step, we want to make sure that the IDL death counts are similar to the HMD counts. We can compare them by calculating the difference in counts at each age/year/sex combination.

```{r}
sum_idl_deaths <- function(data) {
  filtered_data <- data |>
    filter(Year >= 2005, country == "fra") |>
    group_by(Year, Sex, country) |>
    summarise(Deaths = sum(Deaths))
  print(filtered_data) # 2017 female deaths should be 688 
  return(filtered_data)
}

replace_and_clean_deaths <- function(data, summarized_data) {
 
  # Replace Deaths for Age == 105
  data <- data |>
    left_join(summarized_data, by = c("Year", "Sex", "country"))
   
  data <- data |>
    mutate(Deaths = if_else(!is.na(Deaths.y), Deaths.y, Deaths.x)) |>
    select(-Deaths.y, -Deaths.x)
  
  # Remove rows where Age > 105 for the matching cases
  data <- data |>
    filter(!(Year %in% summarized_data$Year & 
             Sex %in% summarized_data$Sex & 
             country %in% summarized_data$country & 
             Age > 105))
  
  return(data)
}

create_data_for_comparison <- function(hmd_data, idl_data, sum_idl_deaths_fn, replace_and_clean_deaths) {
  idl_data <- idl_data |>
    rename(
      Year = DEATH_YEAR,
      Sex = SEX,
      Age = AGEYEARS
    ) |>
    mutate(Sex = ifelse(Sex == "F", "f", 
                      ifelse(Sex == "M", "m", Sex))) 
  
  print(idl_data)
  
  joined_data <- hmd_data |>
    full_join(idl_data, by = c("Year", "country", "Sex", "Age")) |>
    filter(Age >= 105) |>
    filter(!is.na(Deaths)) |>
    filter(country != "swe") |>
    filter(country != "nor")
  
  print(joined_data)
  
  summarized_data <- sum_idl_deaths_fn(joined_data)
  print(summarized_data)
  joined_data <- replace_and_clean_deaths(joined_data, summarized_data)

  # add difference column
  joined_data <- joined_data |>
    mutate(difference = (Period_Deaths - Deaths))

  return(joined_data)
}

data_for_comparison <- create_data_for_comparison(hmd_period_data, idl_period_data, sum_idl_deaths, replace_and_clean_deaths)

```

```{r}
library(viridis)
ggplot(data_for_comparison, aes(x=Year, y=difference, color=as.factor(Age))) +
  geom_point(alpha = 3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  facet_wrap(~ country + Sex, scales = "free") +
  theme_minimal() +
  scale_color_viridis_d() +
  labs(color = "Age") +
  labs(y="Difference in Death Counts (HMD-IDL)",
       title="Difference in HMD and IDL Death Counts Over Time | Denmark and France")
  
```

## Create period validation dataset

To create the dataset that we'll use for validation, we need to merge the HMD and IDL data. For the period data, we'll join by year, country, age and sex for all years and countries that are in both datasets. Deaths from 105 to 122 will be replaced with deaths from the IDL, while all other ages will retain counts from the HMD.

```{r}
create_period_val_data <- function(hmd_data, idl_data) {
  idl_data <- idl_data |>
    rename(
      Year = DEATH_YEAR,
      Sex = SEX,
      Age = AGEYEARS
    ) |>
    mutate(Sex = ifelse(Sex == "F", "f", 
                      ifelse(Sex == "M", "m", Sex)))
  
  # gives a list of the year and country combos in IDL data
  combos_to_keep <- idl_data |>
    select(Year, country) |>
    distinct()
  
  joined_data <- hmd_data |>
    full_join(idl_data, by = c("Year", "country", "Sex", "Age")) |>
    # returns all rows from dataframe with a match in combos_to_keep
    semi_join(combos_to_keep, by = c("Year", "country"))

  # replace Deaths values in hmd_data with those from idl_data
  joined_data <- joined_data |>
    mutate(Period_Deaths = if_else(!is.na(Deaths), Deaths, Period_Deaths)) |>
    select(-Deaths)

  return(joined_data)
}
```

```{r}
period_val <- create_period_val_data(hmd_period_data, idl_period_data)
```

## Check data quality

### France

```{r}
# read in Mx data from HMD
fra_period_mx <- read.table(paste(path, "FRAMx_1x1.txt", sep='/'), 
                                 sep='', 
                              header = TRUE, stringsAsFactors = FALSE, skip = 2)
```

To compare death rates from the validation data and the HMD data, we need to merge the HMD Mx data with our data. The functions below do this for both the period and cohort data.

```{r}
combine_mx_death_data_per <- function(my_mx_data, hmd_mx_data, start_year) {
  hmd_mx_data <- pivot_longer(hmd_mx_data, cols = c('Female', 'Male', 'Total'),
                              names_to = "Sex", values_to = "Mx_hmd")

  hmd_mx_data <- hmd_mx_data |>
    mutate(Sex = ifelse(Sex == "Female", "f", 
                      ifelse(Sex == "Male", "m", 
                             ifelse(Sex == "Total", "b", Sex)))) |>
    mutate(Age = ifelse(Age == "110+", "110", Age)) |>
    mutate(Year = as.integer(Year), Age = as.integer(Age), Sex = as.character(Sex)) |>
    filter(!Sex == 'b') |>
    filter(Year >= start_year)

  
  my_mx_data <- my_mx_data |> 
    select(Year, Age, Sex, Mx) |>
    mutate(Year = as.integer(Year), Age = as.integer(Age), Sex = as.character(Sex))

  combined_df <- my_mx_data |>
    full_join(hmd_mx_data, by = c("Year", "Age", "Sex")) 
  
  return(combined_df)
}
```

We need to slightly adjust our data for the checks by creating an Mx column and filtering to only include data from France from after 1978.

```{r}
fra_start_year = 1978
fra_period_val_with_mx <- period_val |>
  mutate(Mx = (Period_Deaths / Exposure)) |>
  filter(country == "fra") |>
  filter(Year >= fra_start_year)
```

Combine data and calculate the difference between the HMD Mxs and our Mxs

```{r}
combined_mx <- combine_mx_death_data_per(fra_period_val_with_mx, fra_period_mx, 
                                         fra_start_year)
combined_mx$Mx <- round(combined_mx$Mx, digits = 6)
combined_mx <- combined_mx |>
  mutate(difference = (as.numeric(Mx_hmd) - Mx))
```

All ages comparison

```{r}
ggplot(combined_mx, aes(x=Year, y=difference, color=Age)) +
  geom_point(alpha = 3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  facet_wrap(~ Sex, scales = "free") +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(color = "Age") +
  labs(y="Difference between HMD and Validation Mortality Rates") 
```

Ages under 80 comparison - Period data looks great

```{r}
combined_mx_younger <- combined_mx |>
  filter(Age <= 79) |>
  # removing very small deviation from 0 
  mutate(difference = ifelse((difference <= abs(0.00001)), 0, difference))

ggplot(combined_mx_younger, aes(x=Year, y=difference, color=Age)) +
  geom_point(alpha = 3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  facet_wrap(~ Sex, scales = "free") +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(color = "Age") +
  labs(y="Difference between HMD and Validation Mortality Rates")
```

### Denmark

```{r}
dnk_period_mx <- read.table(paste(path, "DNKMx_1x1.txt", sep='/'), 
                                 sep='', 
                              header = TRUE, stringsAsFactors = FALSE, skip = 2)
```

```{r}
dnk_start_year = 1970
dnk_period_val_with_mx <- period_val |>
  mutate(Mx = (Period_Deaths / Exposure)) |>
  filter(country == "dnk") |>
  filter(Year >= dnk_start_year)
```

```{r}
combined_mx <- combine_mx_death_data_per(dnk_period_val_with_mx, dnk_period_mx, 
                                         dnk_start_year)
combined_mx$Mx <- round(combined_mx$Mx, digits = 6)
combined_mx <- combined_mx |>
  mutate(difference = (as.numeric(Mx_hmd) - Mx))
```

All ages comparison

```{r}
ggplot(combined_mx, aes(x=Year, y=difference, color=Age)) +
  geom_point(alpha = 3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  facet_wrap(~ Sex, scales = "free") +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(color = "Age") +
  labs(y="Difference between HMD and Validation Mortality Rates") 
```

Ages under 80 comparison - Period data looks great

```{r}
combined_mx_younger <- combined_mx |>
  filter(Age <= 79) |>
  # removing very small deviation from 0 
  mutate(difference = ifelse((difference <= 0.00001), 0, difference))

ggplot(combined_mx_younger, aes(x=Year, y=difference, color=Age)) +
  geom_point(alpha = 3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  facet_wrap(~ Sex, scales = "free") +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(color = "Age") +
  labs(y="Difference between HMD and Validation Mortality Rates")
```

## Final cleaning

Restrict data to 80+

```{r}
period_val <- period_val |>
  filter(Age >= 80) |>
  arrange(country, Year, Age, Sex) 
```

Remove rows with missing ages between 80 and 104 and missing deaths

```{r}
# rows_with_missing_ages <- period_val |>
#     group_by(Year, Sex, country) |>
#     summarise(
#       missing_ages = all(!80:104 %in% Age)
#     ) |>
#     filter(missing_ages) |>
#     ungroup()
# 
# period_val <- period_val |>
#     rowwise() |>
#     filter(!(country %in% rows_with_missing_ages$country &
#              Year %in% rows_with_missing_ages$Year &
#              Sex %in% rows_with_missing_ages$Sex)) |>
#     ungroup()

period_val <- period_val |>
  rename(Deaths = Period_Deaths)
```

## Save data files

The final validation data saved below includes the highest quality data composed from the HMD and IDL. After filtering out lower quality data (for example, years of data with some deaths at an "unknown" age), the remaining data includes death and exposure information across all ages for the following years and countries:

Period IDL Data (what we'd expect given data availability)

| Country | Starting Year | Ending Year |
|---------|---------------|-------------|
| France  | 1978          | 2022        |
| Denmark | 1970          | 2014        |
| Norway  | 1986          | 2006        |
| Sweden  | 1986          | 2003        |

```{r}
cat("France \n")
filtered_data <- period_val |> filter(country == "fra") |>
  filter(Age <= 104) # ensure not all of the data for each 
                      # year is coming from IDl 
print(unique(filtered_data$Year))

cat("Denmark \n")
filtered_data <- period_val |> filter(country == "dnk") |>
  filter(Age <= 104)
print(unique(filtered_data$Year))

cat("Norway \n")
filtered_data <- period_val |> filter(country == "nor") |>
  filter(Age <= 104)
print(unique(filtered_data$Year))

cat("Sweden \n")
filtered_data <- period_val |> filter(country == "swe") |>
  filter(Age <= 104)
print(unique(filtered_data$Year))
```

Our Period Validation Data

| Country | Starting Year | Ending Year |
|---------|---------------|-------------|
| France  | 1978          | 2021        |
| Denmark | 1970          | 2014        |
| Norway  | NA            | NA          |
| Sweden  | 1986          | 2003        |

Norway ends up disappearing in both the period and cohort datasets. It doesn't have enough high quality data from HMD that matches with the years available from IDL. So, we don't include Norway data in our validation dataset for now.

Swedish IDL data isn't as high quality (only data for ages 110+) so we also leave out Sweden for now.

```{r}
period_val <- period_val |>
  filter(country != "swe" & country != "nor")
```

Final data years description

Period Val

| Country | Starting Year | Ending Year |
|---------|---------------|-------------|
| France  | 1978          | 2021        |
| Denmark | 1970          | 2014        |

Save data files to data directory

```{r}
write_csv(period_val, paste(path, "period_validation_data.csv", sep="/"))
```
